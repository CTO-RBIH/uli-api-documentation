openapi: 3.0.1
info:
  title: Kamdhenu
  description: ''
  version: 1.0.0
tags: []
paths:
  /qa/digilocker/issued-documents/1.3/en:
    get:
      summary: Digi Locker
      deprecated: false
      description: ''
      tags: []
      parameters:
        - name: client-id
          in: header
          description: Client Id
          required: true
          example: UlNoNEFaSXFuSTNKQ09oMEthTFhWVWQyek9vYQ==
          schema:
            type: string
        - name: consent-id
          in: header
          description: Consent Id
          required: true
          example: 3883ct99u3992
          schema:
            type: string
        - name: txncode
          in: header
          description: Transaction Code
          required: true
          example: 3245336A355h44
          schema:
            type: string
        - name: ts
          in: header
          description: Timestamp
          required: true
          example: 2025-08-07T16:05:31+0530
          schema:
            type: string
        - name: provider
          in: header
          description: Provider (DigiLocker = 110)
          required: true
          example: '110'
          schema:
            type: string
        - name: x-sp-token
          in: header
          description: Lender token
          required: true
          example: ''
          schema:
            type: string
        - name: scope
          in: header
          description: PANCR/ADHAR
          required: true
          example: ADHAR
          schema:
            type: string
        - name: api-key
          in: header
          description: API Key
          required: true
          example: abcd12345678910efghjkljk
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    properties:
                      errcode:
                        type: string
                      status:
                        type: string
                      info:
                        type: string
                    required:
                      - errcode
                      - status
                      - info
                  data:
                    type: object
                    properties:
                      ADHAR:
                        type: string
                    required:
                      - ADHAR
                  signature:
                    type: string
                  meta:
                    type: object
                    properties:
                      txncode:
                        type: string
                      ver:
                        type: string
                      ts:
                        type: string
                    required:
                      - txncode
                      - ver
                      - ts
                  hmac:
                    type: string
                  publickey:
                    type: string
                  sig-algo:
                    type: string
                required:
                  - result
                  - data
                  - signature
                  - meta
                  - hmac
                  - publickey
                  - sig-algo
              example:
                result:
                  errcode: E000
                  status: success
                  info: Fetched issued documents successfully
                data:
                  ADHAR: >-
                    
                signature: >-
                  MGUCMH66Rm2EzsuwErPXVQ5Mmukt//51ULonO+W28Aixca3j6A8Q4VpcXdx6PqM42LDCOAIxAPn4Md4wA0QGPL/vGfWSzjI2M3UpLl0VzX3HCxk+s93yX+rZS+/uWMZHpTex3Dvr2w==
                meta:
                  txncode: 3245336A355h44
                  ver: '1.3'
                  ts: 2025-08-07T16:06:04+0530
                hmac: R4NBLYcvMctZ1ItZpZgUaD80LcGdt34MU1AHqG/NYmc=
                publickey: >-
                  MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEJWRtNdtIGI3ckKM8//6/tt6q0gu//Ie1C8M0O8J342y2tIBH1tYsu7h87HFPFzajAn40Floq3eWZNbvfg4pApok3qNsg761Ls85M8Z3uw/17d4J1r5JxmxVPKCiFpT0d
                sig-algo: SHA256withECDSA
          headers: {}
      security:
        - bearer: []
components:
  schemas: {}
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
servers: []
security: []
